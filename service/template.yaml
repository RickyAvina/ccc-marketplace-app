# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  ccc-marketplace

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 200
    Environment:
      Variables:
        AUTH0_TENANT: dev-86rvru3cjw5ztru0


# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html

Resources:

  # Lambda Functions
  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/login.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: Get user from table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
          
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login
            Method: POST

  createUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-user.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Description: Create a new user
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /create-user
            Method: POST
    
  createPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-post.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 512
      Description: Create a post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostTable
      Environment:
        Variables:
          POST_TABLE: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /create-post
            Method: POST

  getPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-posts.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 512
      Description: Get posts
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostTable
      Environment:
        Variables:
          POST_TABLE: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-post
            Method: GET

  # Tables
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "User"
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        -
          IndexName: Email-index
          KeySchema:
            -
              AttributeName: "email"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
  
  PostTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Post"
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  # S3 Buckets
  ImageBlobs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: image-blobs

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
